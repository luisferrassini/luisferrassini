<div id="app">
  <div class="pl-4 pr-4">
    <div class="center-flex">
      <div ref="terminal" id="terminal" @click="focusInput">
        <div v-for="line in lines">{{ line }}</div>
        > <input ref="terminalInput" id="terminal-input" type="text" v-model="input" @keyup.enter="processCommand" @keyup.up="inputUp()" @keyup.down="inputDown()">
      </div>
    </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/vue@2"></script>
<script>
  new Vue({
    el: '#app',
    data: {
      lines: [],
      input: '',
      randomFact: '',
      commands: [],
      commandsIndex: 0
    },
    created() {
      // Retrieve terminal history from localStorage
      const terminalHistory = localStorage.getItem('terminalHistory');
      const terminalCommands = localStorage.getItem('terminalCommands');
      if (terminalHistory) {
        this.lines = JSON.parse(terminalHistory);
        if (this.lines.length === 0) {
          this.lines.push('Welcome to Luís Ferrassini\'s Terminal!');
          this.lines.push('Type "help" for a list of commands.');
        }
      } else {
        // Initialize with default welcome message
        this.lines.push('Welcome to Luís Ferrassini\'s Terminal!');
        this.lines.push('Type "help" for a list of commands.');
      }

      if (terminalCommands) {
        this.commands = JSON.parse(terminalCommands);
      } else {
        localStorage.setItem('terminalCommands', JSON.stringify(this.commands));
      }

      this.commandsIndex = 0;
    },
    methods: {
      focusInput() {
        this.$refs.terminalInput.focus();
      },
      async fetchRandomFact() {
        try {
          const response = await fetch("/api/random_fact");
          const data = await response.json();
          this.randomFact = data.fact;
        } catch (error) {
          console.error("Error fetching random fact:", error);
        }
      },
      openNewBackgroundTab(url) {
        window.open(url);
        window.open('', '_self').close();
      },
      scrollToBottom() {
        this.$refs.terminal.scrollTop = this.$refs.terminal.scrollHeight;
      },
      processCommand() {
        const command = this.input.trim().toLowerCase();
        this.lines.push('> ' + command);
        this.commands.push(command);
        this.input = '';

        const commandActions = {
          help: () => {
            this.lines.push('Available commands:');
            this.lines.push('- help: Show this message');
            this.lines.push('- clear: Clear the terminal');
            this.lines.push('- random: Show a random fact');
            this.lines.push('- linkedin: Opens Luís Ferrassini\'s LinkedIn in another tab');
            this.lines.push('- github: Opens Luís Ferrassini\'s Github in another tab');
          },
          clear: () => {
            this.lines = ['Welcome to Luís Ferrassini\'s Terminal!', 'Type "help" for a list of commands.'];
          },
          linkedin: () => {
            this.lines.push('Opening Luís Ferrassini\'s LinkedIn on another tab..');
            this.openNewBackgroundTab('https://www.linkedin.com/in/luisferrassini/');
          },
          github: () => {
            this.lines.push('Opening Luís Ferrassini\'s GitHub on another tab..');
            this.openNewBackgroundTab('https://github.com/luisferrassini');
          },
          cv: () => {
            this.lines.push('Opening Luís Ferrassini\'s CV in another tab..');
            this.openNewBackgroundTab('/about_me');
          },
          random: async () => {
            this.lines.push(await this.fetchRandomFact());
          },
          hello: () => {
            this.lines.push('Hi!');
          },
          hi: () => {
            this.lines.push('Hello!');
          },
          reset: () => {
            this.lines = [];
            this.input = '';
            this.randomFact = '';
            this.commands = [];
            this.commandsIndex = 0;
            this.lines.push('Welcome to Luís Ferrassini\'s Terminal!');
            this.lines.push('Type "help" for a list of commands.');
          },
          default: () => {
            this.lines.push('Command not found. Type "help" for available commands.');
          }
        };

        // Execute the corresponding action for the command or use the default action
        (commandActions[command] || commandActions.default)();

        // Save terminal history to localStorage
        localStorage.setItem('terminalHistory', JSON.stringify(this.lines));
        localStorage.setItem('terminalCommands', JSON.stringify(this.commands));
        this.commandsIndex = 0;
        this.scrollToBottom();
      },
      inputUp() {
        if (this.commands.length - this.commandsIndex > 0) {
          this.input = this.commands[this.commands.length - this.commandsIndex - 1];
          this.commandsIndex++;
        }
      },
      inputDown() {
        if (this.commandsIndex > 0) {
          this.input = this.commands[this.commands.length - this.commandsIndex + 1];
          this.commandsIndex--;
        }
      }
    },
    mounted() {
      this.focusInput();
    }
  });
</script>